#!/usr/bin/env python

import numpy as np
from sensor_msgs.msg import Image
from pantograph_perception.puck_detection import PuckDetection
from pantograph_perception.kalman_filter import KalmanFilter
from geometry_msgs.msg import Pose
import rospy

global pose_pub

class PantographPerception(object):
    def __init__(self):
        rospy.Subscriber('/usb_cam/image_raw',Image ,self.update_image)
        self.pose_pub = rospy.Publisher("xy_position", Pose, queue_size=10)
        self.puck_detector = PuckDetection()
        self.kalman_filter = KalmanFilter()

    def update_image(self, msg):
        pose = Pose()
        u,v = self.puck_detector.detect_puck(msg)
        pose.position.x = u
        pose.position.y = v
        self.pose_pub.publish(pose)


if __name__ == '__main__':
    rospy.init_node('pantograph_perception')
    obj = PantographPerception()
    rospy.spin() 